import util.DateOps.DateEnhancer
import util.ParsingUtil.{getLinesFromCsv, parseLink, parseMovie, parseRating, parseTag}
import model._

object MovieLensDataAnalysis {

  def main(args: Array[String]): Unit = {
    val movies: Seq[Movie] = getLinesFromCsv("data/movies.csv").map(parseMovie)
    val ratings: Seq[Rating] = getLinesFromCsv("data/ratings.csv").map(parseRating)
    val tags: Seq[Tag] = getLinesFromCsv("data/tags.csv").map(parseTag)
    val links: Seq[Link] = getLinesFromCsv("data/links.csv").map(parseLink)

    val movieMap: Map[Int, Movie] = movies.map(m => (m.id, m)).toMap

    // Case 1
    // YÄ±llara ve tÃ¼rlere (genre) gÃ¶re film sayÄ±larÄ± nedir?
    // (1985 korku filmi x adet, aksiyon filmi y adet, 1986 korku filmi xâ€™ adet, aksiyon filmi yâ€™ adet gibi)
    printMovieCountsByYearAndGenre(movies)

    // Case 2
    // Rating puanlarÄ±na gÃ¶re en fazla yÃ¼ksek puan verilen yÄ±l hangisidir (sinemanÄ±n altÄ±n yÄ±lÄ± ğŸ˜Š)
    printMaxRatedYear(ratings)

    // Case 3
    // YÄ±llara gÃ¶re film adedi en dÃ¼ÅŸÃ¼k olan tÃ¼rlerin genel ortalamadaki yeri nedir?
    // (yÄ±llÄ±k film adedi en dÃ¼ÅŸÃ¼k olan 10 yÄ±lda toplam 13 filmle romantik komedi tÃ¼rÃ¼dÃ¼r
    // ve toplamda xyz adet film arasÄ±nda abc adet Ã§ekilmiÅŸtir)
    minAvgCountOfGenresByYear(movies,10)

    // Case 4
    // TÃ¼rlere gÃ¶re Tag yapan kullanÄ±cÄ±larÄ±n rating puanÄ± verme ortalamasÄ± nedir ve bu oran hangi yÄ±lda peak yapmÄ±ÅŸtÄ±r?
    // (komedi filmleri iÃ§in tag veren her 10 kiÅŸiden 8â€™i filme puan da vermektedir ve bu oran 2018 yÄ±lÄ±nda %90â€™la peak yapmÄ±ÅŸtÄ±r)
    printPeakTagRatingPercentage(ratings, tags, movieMap)

    // Case 5
    // En fazla tag veren kiÅŸinin en sevdiÄŸi ve en sevmediÄŸi tÃ¼rler hangi yÄ±llardadÄ±r?
    // (519 adet tagâ€™le en fazla tag yapan x idâ€™li kullanÄ±cÄ±nÄ±n en yÃ¼ksek puan verdiÄŸi yÄ±l 1985 yÄ±lÄ± aksiyon filmleridir,
    // en az puan verdiÄŸi yÄ±l 2000 yÄ±lÄ± romantik komedi filmleridir)
    printMostTaggedUserBestAndWorstRatingsByGenreAndYear(ratings, tags, movieMap)

    // Case 6
    // TÃ¼rlerine gÃ¶re filmlere Ã¶nce tag yapÄ±lÄ±p sonra mÄ± puan verilmektedir yoksa Ã¶nce puan verilip sonra mÄ± tag yapÄ±lmaktadÄ±r?
    // (burada ilk event tag mi yoksa puan mÄ± bakÄ±lsa yeterli zira tag-puan-tag ÅŸeklinde de gidebilir.)
    printFirstActionForFilmsByGenre(ratings, tags, movieMap)
  }

  private def printPeakTagRatingPercentage(ratings: Seq[Rating], tags: Seq[Tag], movieMap: Map[Int, Movie]): Unit = {
    // Her bir tag iÃ§in, ilgili movie'de bulunan genre ve tag'daki userId pairlerini alÄ±r
    val taggedUsersByGenre: Seq[(String, Int)] = for {
      tag <- tags
      movie: Movie = movieMap(tag.movieId)
      genre <- movie.genres
    } yield (genre, tag.userId)

    // Her bir rating iÃ§in: movie genre, movie year ve rating'e ait userId pairlerini alÄ±r
    val ratedUsersByGenreAndYear: Seq[(String, Int, String)] = for {
      rating <- ratings
      movie: Movie = movieMap(rating.movieId)
      genre <- movie.genres
      year = rating.date.asYear
    } yield (genre, rating.userId, year)

    // Etiket yapan kiÅŸilerin yaptÄ±ÄŸÄ± ratingleri bulmak iÃ§in tÃ¼m listeyi filtreleyerek pairleri alÄ±r
    val intersectionOfRatedUsersByGenreAndYear: Seq[(String, Int, String)] = for {
      (tagGenre, tagUser) <- taggedUsersByGenre
      (ratingGenre, ratingUser, ratingYear) <- ratedUsersByGenreAndYear if tagGenre == ratingGenre && tagUser == ratingUser
    } yield (ratingGenre, ratingUser, ratingYear)

    // Gruplara ait kaÃ§ adet eleman bulunduÄŸunu Ã¶ÄŸrenmek iÃ§in (genre, count) tuple listesine dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r.
    val taggedUserCountsByGenre: List[(String, Int)] = taggedUsersByGenre.distinct.groupBy(x => x._1).map { case (genre, value) => (genre, value.length) }.toList
    val ratedUserCountsByGenre: List[(String, Int)] = intersectionOfRatedUsersByGenreAndYear.distinctBy(x => (x._1, x._2)).groupBy(x => x._1).map { case (genre, value) => (genre, value.length) }.toList
    val ratedUserCountsByGenreAndYear: Seq[((String, String), Int)] = intersectionOfRatedUsersByGenreAndYear.distinct.groupBy(x => (x._1, x._3)).map { case (genre, value) => (genre, value.length) }.toList

    // Her bir genre iÃ§in kaÃ§ adet tag ve rating olduÄŸunu bulmak amacÄ±yla dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r
    val resultPairs: List[(String, Int, Int)] = for {
      (tagGenre, tagCount) <- taggedUserCountsByGenre
      (ratingGenre, ratingCount) <- ratedUserCountsByGenre if tagGenre == ratingGenre
    } yield (ratingGenre, tagCount, ratingCount)

    // Her bir genre iÃ§in kaÃ§ adet tag ve rating olduÄŸunu bulmak amacÄ±yla yÄ±l bazlÄ± dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r
    val resultPairsWithYear: List[(String, String, Int, Int)] = for {
      (tagGenre, tagCount) <- taggedUserCountsByGenre
      ((ratingGenre, ratingYear), ratingCount) <- ratedUserCountsByGenreAndYear if tagGenre == ratingGenre
    } yield (ratingGenre, ratingYear, tagCount, ratingCount)

    resultPairs.foreach { i =>
      val peakYearAndValueTuple: (String, Int) = resultPairsWithYear.filter(x => x._1 == i._1)
        .map(x => (x._2, ((x._4 * 100) / x._3)))
        .maxBy(x => x._2)

      println(s"${i._1} filmleri iÃ§in tag veren her ${i._2} kiÅŸiden ${i._3} tanesi filme de puan vermektedir " +
        s"ve bu oran ${peakYearAndValueTuple._1} yÄ±lÄ±nda %${peakYearAndValueTuple._2} ile peak yapmÄ±ÅŸtÄ±r.")
    }
  }

  private def printFirstActionForFilmsByGenre(ratings: Seq[Rating], tags: Seq[Tag], movieMap: Map[Int, Movie]): Unit = {
    // TÃ¼m ratingler iÃ§erisinden tag bulunanlar iÃ§in genre bazlÄ± ilk tag mi yoksa rating mi yapÄ±ldÄ±ÄŸÄ±na dair bool bir deÄŸer iÃ§eren tuple listeye dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r
    val genreData: Seq[(String, Boolean)] = for {
      rating: Rating <- ratings
      tag: Tag <- tags if rating.movieId == tag.movieId
      movie: Movie = movieMap(rating.movieId)
      genre <- movie.genres
      firstTagged = tag.date.before(rating.date)
    } yield (genre, firstTagged)

    // Bu tuple listesini her iki deÄŸere gÃ¶re gruplar, ilgili adet sayÄ±larÄ±nÄ± alÄ±r, sonra bunlarÄ± genre bazlÄ± tekrar gruplar ve adet olarak max olan ilk etiketlenme verisini alÄ±r, sonra konsola yazdÄ±rÄ±r
    genreData.groupBy(x => (x._1, x._2))
      .map { case (tuple, value) => (tuple._1, tuple._2, value.length) }
      .groupBy(x => x._1)
      .map { case (genre, value) => (genre, value.maxBy(x => x._3)._2) }
      .toList
      .foreach(tuple => println(s"${tuple._1} iÃ§in ilk olarak ${if (tuple._2) "ETÄ°KETLEME" else "PUANLAMA"} yapÄ±lma oranÄ± daha fazladÄ±r"))
  }

  private def printMostTaggedUserBestAndWorstRatingsByGenreAndYear(ratings: Seq[Rating], tags: Seq[Tag], movieMap: Map[Int, Movie]): Unit = {
    // Etiketleri user bazlÄ± gruplayarak her grup iÃ§in kaÃ§ adet eleaman bulunduÄŸunu alÄ±r ve sÄ±ralar
    val userTagCounts: List[(Int, Int)] = tags.groupBy(x => x.userId)
      .map { case (userId, value) => (userId, value.length) }
      .toList
      .sortBy(x => x._2)

    // En Ã§ok etiket yapan kullanÄ±cÄ±yÄ± ve ona ait etiket sayÄ±sÄ±nÄ± alÄ±r
    val mostTaggedUser: (Int, Int) = userTagCounts.reverse.take(1).head

    // Bu kullanÄ±cÄ±ya ait rating'leri alÄ±r ve gruplar
    val ratingsByMostTaggedUser: List[(Double, Seq[Rating])] = ratings.filter(_.userId == mostTaggedUser._1)
      .groupBy(_.rating)
      .toList
      .sortBy(x => x._1)

    // En yÃ¼ksek puan verdiÄŸi rating'leri alÄ±r
    val highestRatingsByMostTaggedUser: (Double, Seq[Rating]) = ratingsByMostTaggedUser.reverse.take(1).head
    println(s"${mostTaggedUser._2} adet tagâ€™le en fazla tag yapan ${mostTaggedUser._1} idâ€™li kullanÄ±cÄ± iÃ§in:")
    getGenreYearTuplesFromRating(movieMap, highestRatingsByMostTaggedUser).groupBy(x => (x._1, x._2))
      .map { case (tuple, value) => (tuple, value.length) }
      .toList.sortBy(x => (x._2)).reverse
      .take(1).foreach(pair =>
      println(s"  - En yÃ¼ksek puan olarak ${highestRatingsByMostTaggedUser._1} verdiÄŸi yÄ±l ${pair._2} adet puan ile ${pair._1._2} yÄ±lÄ± ${pair._1._1} filmleridir.")
    )

    // En dÃ¼ÅŸÃ¼k puan verdiÄŸi rating'leri alÄ±r
    val lowestRatingsByMostTaggedUser: (Double, Seq[Rating]) = ratingsByMostTaggedUser.take(1).head
    getGenreYearTuplesFromRating(movieMap, lowestRatingsByMostTaggedUser).groupBy(x => (x._1, x._2))
      .map { case (tuple, value) => (tuple, value.length) }
      .toList.sortBy(x => (x._2)).reverse
      .take(1).foreach(pair =>
      println(s"  - En dÃ¼ÅŸÃ¼k puan olarak ${lowestRatingsByMostTaggedUser._1} verdiÄŸi yÄ±l ${pair._2} adet puan ile ${pair._1._2} yÄ±lÄ± ${pair._1._1} filmleridir.")
    )
  }

  // Her bir rating iÃ§in genre, year tuple dÃ¶nÃ¼ÅŸÃ¼mÃ¼nÃ¼ yapar
  private def getGenreYearTuplesFromRating(movieMap: Map[Int, Movie], highestRatingsByMostTaggedUser: (Double, Seq[Rating])): Seq[(String, String)] = {
    val genreYearPairs: Seq[(String, String)] = for {
      rating <- highestRatingsByMostTaggedUser._2
      movie: Movie = movieMap(rating.movieId)
      genre <- movie.genres
      ratingYear = rating.date.asYear
    } yield (genre, ratingYear)
    genreYearPairs
  }

  private def minAvgCountOfGenresByYear(movies: Seq[Movie], lastYearCount: Int): Unit = {
    // Film sayÄ±sÄ± en dÃ¼ÅŸÃ¼k olan son $lastYearCount yÄ±lÄ± getirir
    val lastYears: Seq[Int] = movies.flatMap(_.year)
      .groupBy(y => y)
      .map { case (k, v) => (k, v.length) }
      .toList
      .sortBy(x => x._2)
      .take(lastYearCount).map(_._1)

    // Son $lastYearCount yÄ±l iÃ§in genre'lere ait gruplandÄ±ktan sonra kaÃ§ adet olduÄŸunu pair olarak tutar
    val lastYearsByGenreCount: List[(String, Int)] = movies.filter(_.year.isDefined)
      .filter(m => lastYears.contains(m.year.get))
      .flatMap(_.genres)
      .groupBy(g => g)
      .map { case (k, v) => (k, v.length) }
      .toList
      .sortBy(x => x._1)

    val lastYearsGenres: List[String] = lastYearsByGenreCount.map(_._1)

    // TÃ¼m zamanlarda bu genre'lere ait adetleri tutar
    val totalMatchedGroupedGenreCounts: List[(String, Int)] = movies
      .filter(_.genres.exists(lastYearsGenres.contains))
      .flatMap(_.genres)
      .groupBy(g => g)
      .map { case (k, v) => (k, v.length) }
      .toList
      .sortBy(x => x._1)

    // Son $lastYearCount iÃ§in her bir genre iÃ§in tÃ¼m yÄ±llardaki genel genre oranÄ±nÄ± hesaplar
    println(s"YÄ±llÄ±k film adedi en dÃ¼ÅŸÃ¼k olan $lastYearCount yÄ±lda:")
    lastYearsByGenreCount.foreach { pair =>
      val totalGenreCount: Int = totalMatchedGroupedGenreCounts.find(tuple => tuple._1.equals(pair._1)).map(_._2).getOrElse(0)
      println(s"  - Toplamda ${pair._2} adet film ile ${pair._1} tÃ¼rÃ¼dÃ¼r. Toplamda $totalGenreCount adet film arasÄ±nda ${pair._2} adet Ã§ekilmiÅŸtir.")
    }
  }

  private def printMaxRatedYear(ratings: Seq[Rating]): Unit = {
    // Transform ratings to years of it, then group by itself to get counts, then print max rated year with count
    ratings.map(rating => rating.date.asYear)
           .groupBy(x => x)
           .map { case (year, value) => (year, value.length) }
           .toList
           .maxBy(y => y._2) match {
              case (year, totalRatingCount) => println(s"Year:$year is most rated year with total count:$totalRatingCount")
           }
  }

  private def printMovieCountsByYearAndGenre(movies: Seq[Movie]): Unit = {
    // Transform movies to year and genre tuples
    val yearGenreTuples: Seq[(String, String)] = for {
      movie: Movie <- movies
      year = movie.year.getOrElse("Undefined")
      genre: String <- movie.genres
    } yield (year.toString, genre)

    // Then group, sort and print each item
    yearGenreTuples.groupBy(m => (m._1, m._2))
                   .map { case (k, v) => (k, v.length) }
                   .toList
                   .sortBy(x => (x._1, x._2))
                   .foreach(pair => println(s"${pair._1._1} yÄ±lÄ± ${pair._1._2} tÃ¼rÃ¼nde ${pair._2} adet"))
  }

  private def printRatingsGroupByMovie(ratings: Seq[Rating], movieMap: Map[Int, Movie]): Unit = {
    val averageRatings: Seq[(Int, Double, Int)] = ratings.groupBy(_.movieId)
                                                         .map { case (k, v) => (k, v.map(_.rating).sum, v.length)}
                                                         .toList
                                                         .sortBy(_._2)
                                                         .reverse
                                                         .take(10)

    averageRatings.map(ar => (movieMap(ar._1).title, ar._2, ar._3)).foreach(println)
  }
}
